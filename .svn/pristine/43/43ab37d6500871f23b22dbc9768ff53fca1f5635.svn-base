package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import javax.swing.AbstractAction;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JSlider;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.KeyStroke;



import model.AbstractTool;
import model.DrawingPanel;
import model.Line;
import model.PaintTool;
import model.Pencil;
import model.Rectangle;
import model.Ellipse;


public class PowerPaintGUI extends JPanel {
    
    
    private List<JButton> myButtonList;
    
    private DrawingPanel myDrawPanel;
    
    private JFrame myMainFrame;
    
    private Map<AbstractTool, ToolAction> myToolActionMap;

    private List<AbstractTool> myToolList; 


    public PowerPaintGUI()  {
        super(new BorderLayout());
        myToolActionMap = new HashMap<>();
        myMainFrame = new JFrame("PowerPaint");
        setUpComponents();
        
    }
    
    public final void setUpComponents() {
        
        myMainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        myDrawPanel = new DrawingPanel();
        add(myDrawPanel, BorderLayout.CENTER);
        createTools();
        makeMenuBar();
        
        myMainFrame.setMinimumSize(myDrawPanel.getMinimumSize());

        myMainFrame.add(this, BorderLayout.CENTER);
        myMainFrame.pack();

        myMainFrame.setVisible(true);
    }
    
    private void createTools() {
        myToolList = new ArrayList<>();
        myToolList.add(new Pencil());
        myToolList.add(new Line());
        myToolList.add(new Rectangle());
        myToolList.add(new Ellipse());
        makeActionButtons();
        
    }
    
    private void makeActionButtons() {
        for (AbstractTool aT : myToolList) {
            myToolActionMap.put(aT, new ToolAction(aT));
            
        }
        createToolBar();
       
    }
   


        
    private void createToolBar() {
        JToolBar toolBar = new JToolBar();
        ButtonGroup toolBarGroup = new ButtonGroup();
        for (final AbstractTool aT : myToolList) {
            JToggleButton button = new JToggleButton(aT.getDescription());
            toolBarGroup.add(button);
            button.setBorderPainted(true);
            button.setAction(myToolActionMap.get(aT));
            toolBar.add(button);
        }
        add(toolBar, BorderLayout.PAGE_END);
    }
        

    private void makeMenuBar() {
        final JMenuBar menuBar = new JMenuBar();
        myMainFrame.setJMenuBar(menuBar);
        menuBar.add(createFileMenu(menuBar));
        menuBar.add(createOptionsMenu(menuBar));
        menuBar.add(createToolMenu(menuBar));
        menuBar.add(createHelpMenu(menuBar));
       
    
    }

    private JMenu createFileMenu(JMenuBar theMenuBar) {
        final JMenu file = new JMenu("File");
        file.setMnemonic(KeyEvent.VK_F);
        theMenuBar.add(file);
        
        JMenuItem undo = new JMenuItem("Undo All Changes");
        undo.setMnemonic(KeyEvent.VK_U);
        file.add(undo);
        
        file.addSeparator();
        
        JMenuItem exit = new JMenuItem("Exit");
        exit.setMnemonic(KeyEvent.VK_X);
        exit.setAccelerator(KeyStroke.getKeyStroke(
                            KeyEvent.VK_X, ActionEvent.META_MASK));
        
        exit.addActionListener(new ActionListener() {
            
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myMainFrame.dispatchEvent(new WindowEvent(myMainFrame, WindowEvent.WINDOW_CLOSING));
            }
        });

        file.add(exit);
       
        return file;
       
    }
    private JMenu createOptionsMenu(JMenuBar theMenuBar) {
        final JMenu options = new JMenu("Options");
        options.setMnemonic(KeyEvent.VK_O);
        theMenuBar.add(options);
        options.add(createGridMenuButton());
        options.addSeparator();
        options.add(createThickSubMenu());
        options.addSeparator();
        options.add(createColorMenu());
        
        return options;
        
    }
    private JCheckBox createGridMenuButton() {
        final JCheckBox gridCheck = new JCheckBox("Grid");
        gridCheck.setMnemonic(KeyEvent.VK_G);
        gridCheck.addActionListener(new ActionListener () {

            @Override
            public void actionPerformed(ActionEvent e) {
                // TODO Auto-generated method stub
                
            }
            
        });
        return gridCheck;
    }
    
    
    private JMenu createThickSubMenu() {
        final JMenu thicknessMenu = new JMenu("Thickness");
        thicknessMenu.setMnemonic(KeyEvent.VK_T);
        final JSlider thickness = new JSlider(0, 20, 1);
        thicknessMenu.add(thickness);
        thickness.setMajorTickSpacing(5);
        thickness.setMinorTickSpacing(1);
        thickness.setPaintLabels(true);
        thickness.setPaintTicks(true);

        return thicknessMenu;
    }
    
    private JMenuItem createColorMenu() {
        final JMenuItem colorChooser = new JMenuItem("Color...");
        colorChooser.setMnemonic(KeyEvent.VK_C);
        colorChooser.addActionListener(new ActionListener() {
            
            // add code to make color do something.
            @Override
            public void actionPerformed(ActionEvent e) {
                final Color newColor = JColorChooser.showDialog(null, "Choose A Color", null); 
            }
        });
        return colorChooser;
        
    }
    private JMenu createToolMenu(JMenuBar theMenuBar) {
        final JMenu tools = new JMenu("Tools");
        tools.setMnemonic(KeyEvent.VK_T);
        ButtonGroup toolGroup = new ButtonGroup();
        for (final AbstractTool aT : myToolList) {
            JRadioButton button = new JRadioButton(aT.getDescription());
            button.setAction(myToolActionMap.get(aT));

            tools.add(button);
            toolGroup.add(button);
        }
        return tools;
    }
    private JMenu createHelpMenu(JMenuBar theMenuBar) {
        final JMenu help = new JMenu("Help");
        theMenuBar.add(help);
        help.add(createAboutItem());
        help.setMnemonic(KeyEvent.VK_H);
        
        return help;
    }
   
    private JMenuItem createAboutItem() {
        JMenuItem about = new JMenuItem("About...");
        about.setMnemonic(KeyEvent.VK_A);
        about.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(null, "TCSS 305 PowerPaint, Autum 2015", "About", JOptionPane.DEFAULT_OPTION);
            }
            
        });
        return about;
    }
    class ToolAction extends AbstractAction {

        /**
         * 
         */
        private static final long serialVersionUID = 6216916389200515214L;
        
        private AbstractTool myTool;

        ToolAction(AbstractTool theTool) {
            super(theTool.getDescription());
            myTool = theTool;
            putValue(SHORT_DESCRIPTION, theTool.getDescription());
            final int keyCode = KeyStroke.getKeyStroke(theTool.getDescription().charAt(0), 0).getKeyCode();
            putValue(MNEMONIC_KEY, keyCode);
            putValue(SELECTED_KEY, false);
            
            final String imageLocation = "images/"
                            + theTool.getDescription()
                            + ".gif";
            final URL imgFileLocation = PowerPaintGUI.class.getResource(imageLocation);
            
            if (Objects.nonNull(imgFileLocation)) {
                putValue(SMALL_ICON, new ImageIcon(imgFileLocation, theTool.getDescription()));
            } else { 
                System.err.println("No Image Found" + imgFileLocation);
            }
            
            

        }
        @Override
        public void actionPerformed(ActionEvent theEvent) {
            putValue(SELECTED_KEY, true); 
            myDrawPanel.setPaintTool(myTool);
            
                
            }
        
        
    }


}
