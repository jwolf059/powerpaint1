package model;

import java.util.Map;

public class Bicycle extends AbstractVehicle {

    public static final int DEATHTIME = 25;
    
    public Bicycle(int theX, int theY, Direction theDir) {
        super(theX, theY, theDir, DEATHTIME);
        
    }

    @Override
    public boolean canPass(Terrain theTerrain, Light theLight) {
        boolean goodTerrain = theTerrain == Terrain.TRAIL || theTerrain == Terrain.STREET 
                        || theTerrain == Terrain.LIGHT;
        boolean goodLight = theLight == Light.GREEN;
        
        return goodTerrain && goodLight;
    }

    @Override
    public Direction chooseDirection(Map<Direction, Terrain> theNeighbors) {
        Direction newDirection;
        final Light colorLight = Light.GREEN;
        final Direction leftSide = getDirection().left();
        final Direction rightSide = getDirection().right();
        final Direction straightAhead = getDirection();
        final boolean canTurnLeft = canPass(theNeighbors.get(leftSide), colorLight);
        final boolean canTurnRight = canPass(theNeighbors.get(rightSide), colorLight);
        final boolean canGoStraight = canPass(theNeighbors.get(straightAhead), colorLight);
        
        if (theNeighbors.get(getDirection()) == Terrain.TRAIL) {
            newDirection = getDirection();
            
        } else if (theNeighbors.get(leftSide) == Terrain.TRAIL) {
            newDirection = leftSide;
            
        } else if (theNeighbors.get(rightSide) == Terrain.TRAIL) {
            newDirection = rightSide;
            
        } else
            if (canTurnLeft) {
                newDirection = leftSide;
            } else if (canTurnRight) {
                newDirection = rightSide;
            } else if (canGoStraight) {
                newDirection = getDirection();
            } else {
                newDirection = getDirection().reverse();
            }
        
            
        return newDirection;
    }

}
